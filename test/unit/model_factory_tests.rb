require 'assert'
require 'mr/model_factory'

require 'mr/fake_record'
require 'mr/model'
require 'mr/record'

class MR::ModelFactory

  class UnitTests < Assert::Context
    desc "MR::ModelFactory"
    setup do
      @factory_class = MR::ModelFactory
    end
    subject{ @factory_class }

    should "include the apply args mixin" do
      assert_includes MR::Factory::ApplyArgs, subject
    end

  end

  class InstanceTests < UnitTests
    setup do
      @model_class  = TestModel
      @record_class = TestFakeRecord

      @record_factory = MR::RecordFactory.new(@record_class)
      MR::RecordFactory.stubs(:new).tap do |s|
        s.with(@record_class)
        s.returns(@record_factory)
      end

      @factory = @factory_class.new(@model_class, @record_class)
    end
    teardown do
      MR::RecordFactory.unstub(:new)
    end
    subject{ @factory }

    should have_imeths :instance, :instance_stack
    should have_imeths :apply_args
    should have_imeths :default_args

    should "allow applying args to a model using `apply_args`" do
      @model = @model_class.new
      subject.apply_args(@model, :name => 'test')
      assert_equal 'test', @model.name
    end

    should "use default args when applying args using `apply_args`" do
      @model = @model_class.new
      subject.default_args(:name => 'test')
      subject.apply_args(@model)
      assert_equal 'test', @model.name
    end

    should "use passed args over default args using `apply_args`" do
      @model = @model_class.new
      subject.default_args(:name => 'first')
      subject.apply_args(@model, :name => 'second')
      assert_equal 'second', @model.name
    end

    should "allow reading/writing default args using `default_args`" do
      assert_equal({}, subject.default_args)
      subject.default_args(:name => 'test')
      assert_equal({ 'name' => 'test' }, subject.default_args)
    end

    should "yield itself when a block is passed to `new`" do
      yielded = nil
      factory = @factory_class.new(@model_class, @record_class){ yielded = self }
      assert_equal factory, yielded
    end

  end

  class InstanceMethodTests < InstanceTests
    desc "instance"
    setup do
      @record = @record_class.new
      @record_factory.stubs(:instance).returns(@record)
    end

    should "return an instance of the model" do
      model = subject.instance
      assert_instance_of @model_class, model
    end

    should "build a record instance for the model using a record factory" do
      model = subject.instance
      assert_same @record, model.record
    end

    should "apply passed args to the model" do
      model = subject.instance(:name => 'test')
      assert_equal 'test', model.name
    end

    should "apply default args to the model" do
      subject.default_args(:name => 'test')
      model = subject.instance
      assert_equal 'test', model.name
    end

    should "apply passed args over default args to the model" do
      subject.default_args(:name => 'first')
      model = subject.instance(:name => 'second')
      assert_equal 'second', model.name
    end

  end

  class InstanceStackTests < InstanceTests
    desc "instance_stack"
    setup do
      @model = @model_class.new.tap(&:save)
      @factory.stubs(:instance).with(nil).returns(@model)

      @model_stack = 'a-model-stack'
      MR::ModelStack.stubs(:new).tap do |s|
        s.with(@model)
        s.returns(@model_stack)
      end

      @model_with_args = @model_class.new.tap(&:save)
      @factory.stubs(:instance).with(:name => 'test').returns(@model_with_args)

      @args_model_stack = 'a-model-stack-with-args'
      MR::ModelStack.stubs(:new).tap do |s|
        s.with(@model_with_args)
        s.returns(@args_model_stack)
      end
    end
    teardown do
      MR::ModelStack.unstub(:new)
    end

    should "return a model stack for an instance generated by itself" do
      assert_equal @model_stack, subject.instance_stack
    end

    should "pass args when generating an instance for the model stack" do
      assert_equal @args_model_stack, subject.instance_stack(:name => 'test')
    end

  end

  class DupArgsTests < InstanceTests
    desc "building multiple models"
    setup do
      @factory = @factory_class.new(@model_class, @record_class)
      @factory.default_args(:user => { :area => { :name => 'Test' } })
    end

    should "not alter the defaults hash when applying args" do
      assert_equal 'Test', @factory.instance.user.area.name
      assert_equal 'Test', @factory.instance.user.area.name
    end

  end

  class TestFakeRecord
    include MR::FakeRecord

    attribute :name,    :string
    attribute :area_id, :integer
    attribute :user_id, :integer

    belongs_to :area, 'MR::ModelFactory::TestFakeRecord'
    belongs_to :user, 'MR::ModelFactory::TestFakeRecord'

  end

  class TestModel
    include MR::Model
    record_class TestFakeRecord

    field_accessor :name

    belongs_to :area
    belongs_to :user

    public :record

  end

end
